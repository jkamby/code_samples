package edu.umb.cs.cs680.filesystem;

import static org.hamcrest.CoreMatchers.*;
import static org.junit.Assert.*;
import org.junit.Test;

import java.util.Date;
public class LinkTest {

	@Test
	public void typeLink() throws Exception {
		assertThat(Link.class, notNullValue());
	}

	@Test
	public void instantiationOfLink() throws Exception {
		Directory target_ = new Directory(null, null, "africa", "Janet");
		Link target = new Link(target_);
		assertThat(target, notNullValue());
		assertThat(target, is(instanceOf(Link.class)));
	}

	@Test
	public void getTargetSizeOfLink() throws Exception {
		File target_ = new File(null, null, null);
		Link target = new Link(target_);
		int actual = target.getTargetSize();
		int expected = 5;
		assertThat(actual, is(equalTo(expected)));
	}

	@Test
	public void getParentOfLink() throws Exception {
		Directory target_ = new Directory(null, null, "problem", "Betty");
		Link target = new Link(target_);
		Object actual = target.getParent();
		Object expected = null;
		assertThat(actual, is(equalTo(expected)));
	}

	@Test
	public void setParentOfLink() throws Exception {
		Directory target_ = new Directory(null, null, "food", "Catherine");
		Link target = new Link(target_);
		Directory newParent = null;
		target.setParent(newParent);
		Directory actual = target.getParent();
		Directory expected = null;
		assertThat(actual, is(equalTo(expected)));
	}

	@Test
	public void isFileOnLink() throws Exception {
		Directory target_ = new Directory(null, null, "nike", "Jordan");
		Link target = new Link(target_);
		boolean actual = target.isFile();
		boolean expected = false;
		assertThat(actual, is(equalTo(expected)));
	}

	@Test
	public void getSizeOfLink() throws Exception {
		Directory target_ = new Directory(null, null, "humble", "Soprano");
		Link target = new Link(target_);
		int actual = target.getSize();
		int expected = 0;
		assertThat(actual, is(equalTo(expected)));
	}

	@Test
	public void setSizeOfLink() throws Exception {
		Directory target_ = new Directory(null, null, "sample", "Patrick");
		Link target = new Link(target_);
		int newSize = 10;
		target.setSize(newSize);
		int actual = target.getSize();
		int expected = 0;
		assertThat(actual, is(equalTo(expected)));
	}

	@Test
	public void getOwnerOfLink() throws Exception {
		Directory target_ = new Directory(null, null, "example", "Allicia");
		Link target = new Link(target_);
		String actual = target.getOwner();
		String expected = "Allicia";
		assertThat(actual, is(equalTo(expected)));
	}

	@Test
	public void setOwnerOfLink() throws Exception {
		Directory target_ = new Directory (null, null, "juice", "Herman");
		Link target = new Link(target_);
		String newOwner = "Joseph";
		target.setOwner(newOwner);
		String actual = target.getOwner();
		String expected = "Herman";
		assertThat(actual, is(equalTo(expected)));
	}

	@Test
	public void getLastModifiedOfLink() throws Exception {
		// TODO auto-generated by JUnit Helper.
		File target_ = new File(null, "homework", "Andrew");
		Link target = new Link(target_);
		Date actual = target.getLastModified();
		Date expected = target_.getLastModified();
		assertThat(actual, is(equalTo(expected)));
	}

	@Test
	public void setLastModifiedOfLink() throws Exception {
		Directory target_ = new Directory(null, null, "megaplot", "Jason");
		Link target = new Link(target_);
		target.setLastModified();
		Date actual = target.getLastModified();
		Date expected = target_.getLastModified();
		assertThat(actual, is(equalTo(expected)));
	}

}
